import { PrismaClient } from '@prisma/client';
import { NextRequest, NextResponse } from 'next/server';

const prisma = new PrismaClient();

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
export async function GET(request: NextRequest, context: { params }: { params: { id: string } }) {
  try {
    if (!context.params || !context.params.id) {
      return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞' }, { status: 400 });
    }

    const projectId = decodeURIComponent(context.params.id); // ‚úÖ –¢–µ–ø–µ—Ä—å ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è

    const project = await prisma.project.findUnique({
      where: { id: projectId },
    });

    if (!project) {
      return NextResponse.json({ error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    return NextResponse.json(project);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞' }, { status: 500 });
  }
}

// üìå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (PUT)
export async function PUT(request: NextRequest, context: { params }: { params: { id: string } }) {
  try {
    if (!context.params || !context.params.id) {
      return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞' }, { status: 400 });
    }

    const projectId = decodeURIComponent(context.params.id);
    const { title, description, startDate, endDate, status } = await request.json();

    const updatedProject = await prisma.project.update({
      where: { id: projectId },
      data: {
        title,
        description,
        startDate: new Date(startDate),
        endDate: endDate ? new Date(endDate) : null,
        status,
      },
    });

    return NextResponse.json(updatedProject);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞' }, { status: 500 });
  }
}

// üìå –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (DELETE)
export async function DELETE(request: NextRequest, context: { params }: { params: { id: string } }) {
  try {
    if (!context.params || !context.params.id) {
      return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞' }, { status: 400 });
    }

    const projectId = decodeURIComponent(context.params.id);

    await prisma.project.delete({
      where: { id: projectId },
    });

    return NextResponse.json({ message: '–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª—ë–Ω' }, { status: 200 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞' }, { status: 500 });
  }
}